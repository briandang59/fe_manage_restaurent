import { ColumnDef } from "@tanstack/react-table";
import { Button } from "@/components/ui/button";
import { Edit, Trash2 } from "lucide-react";
import {
    AlertDialog,
    AlertDialogAction,
    AlertDialogCancel,
    AlertDialogContent,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogHeader,
    AlertDialogTitle,
    AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { AvailibilitiesResponse } from "@/types/response/availibilities";
import dayjs from "dayjs";

export const createAvailibilitiesColumns = (
    onEdit?: (item: AvailibilitiesResponse) => void,
    onDelete?: (id: string) => void,
    isDeleting?: boolean
): ColumnDef<AvailibilitiesResponse>[] => [
    {
        accessorKey: "index",
        header: "STT",
        cell: ({ row }) => {
            return <div className="text-center">{row.index + 1}</div>;
        },
    },
    {
        // üö® S·ª¨A L·ªñI: C·ªôt T√™n Nh√¢n vi√™n (Hi·ªÉn th·ªã T√™n thay v√¨ ID)
        accessorKey: "employee.full_name",
        header: "T√™n Nh√¢n vi√™n",
        cell: ({ row }) => {
            const fullName = row.original.employee?.full_name;
            // N·∫øu preload th√†nh c√¥ng, hi·ªÉn th·ªã t√™n. N·∫øu kh√¥ng, c√≥ th·ªÉ hi·ªÉn th·ªã ID
            return <p>{fullName ?? "N/A"}</p>;
        },
    },
    {
        // C·ªôt ID Nh√¢n vi√™n (Gi·ªØ l·∫°i ƒë·ªÉ d·ªÖ debug/tra c·ª©u)
        accessorKey: "employee_id",
        header: "ID Nh√¢n vi√™n",
        cell: ({ row }) => {
            return <p>{row.original.employee_id}</p>;
        },
    },
    {
        // üö® S·ª¨A L·ªñI: C·ªôt ID Ca l√†m vi·ªác (Hi·ªÉn th·ªã T√™n Ca l√†m vi·ªác n·∫øu c√≥)
        accessorKey: "shifts.shift_name",
        header: "T√™n Ca l√†m vi·ªác",
        cell: ({ row }) => {
            const shiftName = row.original.shifts?.shift_name;
            return <p>{shiftName ?? row.original.shift_id}</p>;
        },
    },
    {
        accessorKey: "day_of_week",
        header: "Th·ª© trong tu·∫ßn",
    },
    {
        accessorKey: "date",
        header: "Ng√†y",
        cell: ({ row }) => {
            const date = row.getValue("date") as string;
            // Gi·∫£ ƒë·ªãnh date l√† day_of_week (ho·∫∑c b·∫°n c√≥ th·ªÉ d√πng day_of_week)
            return <p>{dayjs(date).format("YYYY/MM/DD")}</p>;
        },
    },
    {
        accessorKey: "is_available", // C·∫≠p nh·∫≠t accessorKey ƒë·ªÉ kh·ªõp v·ªõi d·ªØ li·ªáu JSON
        header: "Tr·∫°ng th√°i",
        cell: ({ row }) => {
            // L·∫•y gi√° tr·ªã boolean t·ª´ is_available
            const isAvailable = row.original.is_available;
            const statusText = isAvailable ? "R·∫£nh" : "B·∫≠n";
            const bgColor = isAvailable ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800";

            return (
                <span className={`rounded-full px-2 py-1 text-xs font-medium ${bgColor}`}>
                    {statusText}
                </span>
            );
        },
    },
    {
        accessorKey: "created_at",
        header: "Ng√†y t·∫°o",
        cell: ({ row }) => {
            const created_at = row.getValue("created_at") as string;
            return <p>{dayjs(created_at).format("YYYY/MM/DD HH:mm")}</p>;
        },
    },
    {
        accessorKey: "updated_at",
        header: "Ng√†y c·∫≠p nh·∫≠t",
        cell: ({ row }) => {
            const updated_at = row.getValue("updated_at") as string;
            return <p>{dayjs(updated_at).format("YYYY/MM/DD HH:mm")}</p>;
        },
    },
    {
        id: "actions",
        header: "Thao t√°c",
        cell: ({ row }) => {
            const availibilitiesItem = row.original;

            return (
                <div className="flex gap-2">
                    <Button
                        variant="outline"
                        size="sm"
                        onClick={() => onEdit?.(availibilitiesItem)}
                    >
                        <Edit className="h-4 w-4" />
                    </Button>

                    <AlertDialog>
                        <AlertDialogTrigger asChild>
                            <Button variant="outline" size="sm" disabled={isDeleting || false}>
                                <Trash2 className="h-4 w-4" />
                            </Button>
                        </AlertDialogTrigger>
                        <AlertDialogContent>
                            <AlertDialogHeader>
                                <AlertDialogTitle>X√°c nh·∫≠n x√≥a</AlertDialogTitle>
                                <AlertDialogDescription>
                                    B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a l·ªãch r·∫£nh n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ
                                    ho√†n t√°c.
                                </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                                <AlertDialogCancel>H·ªßy</AlertDialogCancel>
                                <AlertDialogAction
                                    onClick={() => onDelete?.(availibilitiesItem.id.toString())}
                                    className="bg-red-600 hover:bg-red-700"
                                >
                                    X√≥a
                                </AlertDialogAction>
                            </AlertDialogFooter>
                        </AlertDialogContent>
                    </AlertDialog>
                </div>
            );
        },
    },
];
